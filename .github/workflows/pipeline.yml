name: "ohadz-npm-gha"

on:   
  workflow_dispatch:

permissions:
  id-token: write
  contents: read 
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: 'ohadz-test-docker'
      IMAGE_NAME: 'ohadz-npm-gha'
      BUILD_NAME: 'ohadz-npm-gha'
   
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
  
      - name: Setup-JFrog-CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          SERVER_ID: setup-jfrog-cli-server
        with:
          oidc-provider-name: ohadz-gh 
          oidc-audience: test-aud

      - name: Test JFrog CLI
        run: |
          jf c show
          jf rt ping
          jf -v
    
      - name: NPM Config
        run: jf npmc --server-id-resolve=setup-jfrog-cli-server --server-id-deploy=setup-jfrog-cli-server --repo-deploy ${{ vars.NPM_REPO }} --repo-resolve ${{ vars.NPM_REMOTE_REPO }} --global
        working-directory: ./Source
        
      - name: Install NPM Project
        run: jf npm install --loglevel verbose
        working-directory: ./Source
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
  
      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          load: true
          context: ./Source
          file: ./Source/Dockerfile
          tags: ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          provenance: true  

      - name: Deploy Docker image
        run: jf docker push ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:latest --build-name=${{ env.BUILD_NAME }} --build-number=${{ github.run_number }}

      - name: Collect and Publish Build Info
        run: |
          # Collect environment variables for the build
          jf rt bce
          # Collect VCS details from git and add them to the build
          jf rt bag
          # Publish build info
          jf rt bp
     
      - name: Security Audit
        run: jf audit
        
      - name: Scan Build
        run: jf bs --fail=false --vuln --format table --rescan

      - name: docker scan
        run: |  
         jf docker pull ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
         jf docker scan ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
