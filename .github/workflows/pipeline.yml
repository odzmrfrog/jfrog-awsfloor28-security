name: "ohadz-npm-gha"

on:   
  workflow_dispatch:

permissions:
  id-token: write
  contents: read 
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: 'ohadz-test-docker'
      IMAGE_NAME: 'ohadz-npm-gha'
   
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
  
      - name: Setup-JFrog-CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: ohadz-gh 
          oidc-audience: test-aud
    
        
  #    - name: Setup JFrog CLI
  #      uses: jfrog/setup-jfrog-cli@v3
  #      env:
  #        JF_URL: ${{ vars.JF_URL }}
  #        JF_USER: ${{ vars.JF_USER }}
  #        JF_PASSWORD: ${{ secrets.JF_PASS }}
  #        SERVER_ID: setup-jfrog-cli-server
      
      - name: Test JFrog CLI
        run: |
          jf c show
          jf rt ping
          jf -v
    
      - name: NPM Config
        run: jf npmc --server-id-resolve=setup-jfrog-cli-server --server-id-deploy=setup-jfrog-cli-server --repo-deploy ${{ vars.NPM_REPO }} --repo-resolve ${{ vars.NPM_REMOTE_REPO }} --global
         # npm config set registry ${{ vars.NPM_REG }}
         # npm config ls -l
        working-directory: ./Source
        
      - name: Install NPM Project
        run: jf npm install 
        working-directory: ./Source

      - name: List Files
        run: ls

      #- name: Login to Docker Enviroment
      #  run: docker login ${{ vars.DOCKER_REG_SRV }} -u ${{ steps.Setup-JFrog-CLI.outputs.oidc-user }} -p ${{ steps.Setup-JFrog-CLI.outputs.oidc-token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
  
      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          tags: ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          provenance: false  
          build-args: |
            OIDC_USER=${{ steps.setup-cli.outputs.oidc-user }}
            OIDC_PASSWORD=${{ steps.setup-cli.outputs.oidc-token }}
            JF_NPM_URL=${{ secrets.JF_NPM_URL }}
 
      #- name: Build Docker Image
        #env:
        #  ARTIFACTORY_URL: ${{ secrets.JF_NPM_URL }}
        #  ARTIFACTORY_USERNAME: ${{ secrets.JF_USERNAME }}
        #  ARTIFACTORY_API_KEY: ${{ secrets.JF_API_KEY }}
       # run: docker build -t ohadz-npm-project ./Source 
      #  run: |
      #    docker build  -t ohadz-npm-project ./Source \
      #                 --build-arg JF_NPMRC=${{ secrets.JF_NPMRC }}
       #                --build-arg ARTIFACTORY_USERNAME=${{ secrets.JF_USERNAME }} \
       #                --build-arg ARTIFACTORY_API_KEY=${{ secrets.JF_API_KEY }}
                      
      
    #  - name: Tag Docker Image
    #    run: docker tag ohadz-npm-project:latest soleng.jfrog.io/ohadz-test-docker/ohadz-npm-project:latest
        
    #  - name: Push Docker Image to RT
       #run: docker push $DOCKER_IMAGE_TAG
    #    run: jf docker push soleng.jfrog.io/ohadz-test-docker/ohadz-npm-project:latest
      
      - name: Collect and Publish Build Info
        run: |
          # Collect environment variables for the build
          jf rt bce
          # Collect VCS details from git and add them to the build
          jf rt bag
          jf rt bad ./source
          # Publish build info
          jf rt bp
      
      - name: Security Audit
        run: jf audit
        
      - name: Scan Build
        run: jf bs --fail=false --vuln --format table --rescan
          
